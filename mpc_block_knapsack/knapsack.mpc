import sys
sys.path.append("../MP-SPDZ")
from Compiler.oram import OptimalORAM
from Compiler.types import cint

values = OptimalORAM(10)
weights = OptimalORAM(10)
for i in range(10):
    #print(isinstance(sint.get_input_from(0), sint))
    values[i] = sbitvec.get_type(1000).get_input_from(0)
    weights[i] = sbitvec.get_type(1000).get_input_from(0)

# Is currently a clear integer. In a real world deployment, it should be a secret-shared integer. Problem is that you can't loop over secret-shared integers
n = public_input()
W = public_input()
# space = MultiArray([1000, 1000], sint)
# m = MultiArray([n, W], sint, address=space.address)
size = n*W
m = OptimalORAM(1000*1000)

@for_range(1, n)
def _(i):
    @for_range(1, W)
    def _(j):
        m[i][j] = (weights[i] > j).if_else(m[i-1][j], m[i-1][j].max(m[i-1][j - weights[i]] + values[i]))


print_ln(m[n][W].reveal_list())