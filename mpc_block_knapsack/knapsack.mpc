import sys
sys.path.append("../MP-SPDZ")
from Compiler.oram import OptimalORAM
from Compiler.types import cint

values = OptimalORAM(10)
weights = OptimalORAM(10)
for i in range(10):
    values[i] = sbitvec.get_type(1000).get_input_from(0)
    weights[i] = sbitvec.get_type(1000).get_input_from(0)

# Is currently a clear integer. In a real world deployment, it should be a secret-shared integer. Problem is that you can't loop over secret-shared integers
n = public_input()
W = public_input()
size = n*W
m = OptimalORAM(1000*1000)

@for_range(1, n)
def _(i):
    @for_range(1, W)
    def _(j):
        tmp_j = regint.bit_decompose(j)
        tmp_j = [sbit(x) for x in tmp_j]
        tmp_j = sbitvec.from_vec(tmp_j)
        condition = weights[i] > tmp_j
        outcome1 = m[(i-1)*1000+j]
        outcome2 = m[(i-1)*1000+j].max(m[(i-1)*1000+(j - weights[i] + values[i])])
        m[i*1000+j] = (condition).if_else(outcome1, outcome2)


print_ln("%s", m[regint(n*1000+W)].reveal())
